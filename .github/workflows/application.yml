name: 'Application CI/CD'

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      cluster_name:
        required: true
        type: string
      ecr_repository_url:
        required: true
        type: string
    secrets:
      AWS_ROLE_ARN:
        required: true
      SONAR_TOKEN:
        required: true

jobs:
  build-and-deploy:
    name: 'Build and Deploy Application to ${{ inputs.environment }}'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run unit tests
        run: python -m unittest discover tests

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.ecr_repository_url }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image_url=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Setup Trivy
        uses: aquasecurity/setup-trivy@v0.2.0
      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          skip-setup-trivy: true
          image-ref: ${{ steps.build-image.outputs.image_url }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Setup Helm
        uses: azure/setup-helm@v3

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ inputs.cluster_name }} --region ${{ secrets.AWS_REGION }}

      - name: Deploy with Helm
        run: |
          helm upgrade --install my-flask-app ./helm/my-flask-app \
            --set image.repository=${{ inputs.ecr_repository_url }} \
            --set image.tag=${{ github.sha }}
            # Other values like ingress host and app DB table would also be passed from infra workflow
            # For now, keeping it simple as they are not used in the helm chart directly
