name: 'Infrastructure Provisioning'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'The environment to provision'
        required: true
        type: choice
        options:
          - feature
          - dev
        default: 'dev'

jobs:
  provision_backend:
    name: 'Provision Terraform Backend'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      s3_bucket_name: ${{ steps.set_backend_outputs.outputs.s3_bucket_name }}
      dynamodb_table_name: ${{ steps.set_backend_outputs.outputs.dynamodb_table_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Cache Terraform plugins
        uses: actions/cache@v3
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
      - name: Make backend_setup.sh executable
        run: chmod +x ${{ github.workspace }}/scripts/backend_setup.sh
      - name: Run Backend Setup Script
        id: set_backend_outputs
        run: ${{ github.workspace }}/scripts/backend_setup.sh
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          IAM_ROLE_NAME: ${{ secrets.IAM_ROLE_NAME }}
        working-directory: terraform/backend_setup

  provision_environment:
    name: 'Plan and Apply ${{ github.event.inputs.environment }} Environment'
    runs-on: ubuntu-latest
    needs: provision_backend
    permissions:
      id-token: write
      contents: read
    outputs:
      cluster_name: ${{ steps.tf-apply.outputs.cluster_name }}
      node_role_arn: ${{ steps.tf-apply.outputs.node_role_arn }}
      ecr_repository_url: ${{ steps.tf-apply.outputs.ecr_repository_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Cache Terraform plugins
        uses: actions/cache@v3
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
      - name: Make auto_import.sh executable
        run: chmod +x ${{ github.workspace }}/scripts/auto_import.sh
      - name: Run Auto-Import Script and Terraform Init
        run: ${{ github.workspace }}/scripts/auto_import.sh
        env:
          ENVIRONMENT: ${{ github.event.inputs.environment }}
          BUCKET: ${{ needs.provision_backend.outputs.s3_bucket_name }}
          KEY: "${{ github.event.inputs.environment }}/terraform.tfstate"
          REGION: ${{ secrets.AWS_REGION }}
          DYNAMO_TABLE: ${{ needs.provision_backend.outputs.dynamodb_table_name }}
        working-directory: terraform/environments/${{ github.event.inputs.environment }}
      - name: Terraform Plan and Apply
        id: tf-apply
        run: |
          terraform plan -var-file="${{ github.event.inputs.environment }}.tfvars" -out=tfplan
          terraform apply -auto-approve tfplan
          echo "cluster_name=$(terraform output -raw cluster_name)" >> $GITHUB_OUTPUT
          echo "node_role_arn=$(terraform output -raw node_role_arn)" >> $GITHUB_OUTPUT
          echo "ecr_repository_url=$(terraform output -raw ecr_repository_url)" >> $GITHUB_OUTPUT
        working-directory: terraform/environments/${{ github.event.inputs.environment }}

  apply_kubernetes_auth:
    name: 'Apply Kubernetes Auth Config'
    runs-on: ubuntu-latest
    needs: provision_environment
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Cache Terraform plugins
        uses: actions/cache@v3
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
      - name: Terraform Apply Auth Config
        run: |
          terraform init
          terraform apply -auto-approve \
            -var="cluster_name=${{ needs.provision_environment.outputs.cluster_name }}" \
            -var="node_role_arn=${{ needs.provision_environment.outputs.node_role_arn }}"
        working-directory: terraform/kubernetes_config

  trigger_application_ci:
    name: 'Trigger Application CI/CD'
    needs: apply_kubernetes_auth
    uses: ./.github/workflows/application.yml
    with:
      environment: ${{ github.event.inputs.environment }}
      cluster_name: ${{ needs.provision_environment.outputs.cluster_name }}
      ecr_repository_url: ${{ needs.provision_environment.outputs.ecr_repository_url }}
    secrets:
      AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
