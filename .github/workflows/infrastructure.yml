name: 'Infrastructure Provisioning'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'The environment to provision'
        required: true
        type: choice
        options:
          - feature
          - dev
        default: 'dev'

jobs:
  provision_backend:
    name: 'Provision Terraform Backend'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      s3_bucket_name: ${{ steps.set_backend_outputs.outputs.s3_bucket_name }}
      dynamodb_table_name: ${{ steps.set_backend_outputs.outputs.dynamodb_table_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
      
      - name: Make backend_setup.sh executable
        run: chmod +x ${{ github.workspace }}/scripts/backend_setup.sh
      
      - name: Run Backend Setup Script
        id: set_backend_outputs
        run: ${{ github.workspace }}/scripts/backend_setup.sh
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          IAM_ROLE_NAME: ${{ secrets.IAM_ROLE_NAME }}
        working-directory: terraform/backend_setup
      
      - name: Upload Backend Outputs
        uses: actions/upload-artifact@v4
        with:
          name: backend-outputs
          path: terraform/backend_setup/backend_outputs.env
          retention-days: 1


  provision_environment:
    name: 'Provision ${{ github.event.inputs.environment }} Environment'
    runs-on: ubuntu-latest
    needs: provision_backend
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
      
      - name: Make auto_import.sh executable
        run: chmod +x ${{ github.workspace }}/scripts/auto_import.sh

      - name: Run Auto-Import Script
        run: ${{ github.workspace }}/scripts/auto_import.sh
        env:
          ENVIRONMENT: ${{ github.event.inputs.environment }}
          BUCKET: ${{ needs.provision_backend.outputs.s3_bucket_name }}
          KEY: "${{ github.event.inputs.environment }}/terraform.tfstate"
          REGION: ${{ secrets.AWS_REGION }}
          DYNAMO_TABLE: ${{ needs.provision_backend.outputs.dynamodb_table_name }}
        working-directory: terraform/environments/${{ github.event.inputs.environment }}

      - name: Terraform Apply
        id: tf-apply
        run: |
          terraform apply -var-file="${{ github.event.inputs.environment }}.tfvars" -auto-approve
          terraform output -json > tf_outputs.json
        working-directory: terraform/environments/${{ github.event.inputs.environment }}

      - name: Upload Environment Outputs
        uses: actions/upload-artifact@v4
        with:
          name: environment-outputs-${{ github.event.inputs.environment }}
          path: terraform/environments/${{ github.event.inputs.environment }}/tf_outputs.json
          retention-days: 1
