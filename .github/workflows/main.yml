name: CI/CD Pipeline

on:
  push:
    branches:
      - mai
  workflow_dispatch:

jobs:
  backend-setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init
        working-directory: terraform/backend_setup

      - name: Terraform Apply
        run: |
          terraform apply -auto-approve \
            -var="aws_region=${{ secrets.AWS_REGION }}" \
            -var="bucket_name=${{ secrets.TF_STATE_BUCKET }}" \
            -var="table_name=${{ secrets.TF_STATE_LOCK_TABLE }}" \
            -var="iam_role_name=${{ secrets.IAM_ROLE_NAME }}"
        working-directory: terraform/backend_setup

  build-and-deploy:
    needs: backend-setup
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run unit tests
        run: python -m unittest discover tests

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=feature/terraform.tfstate" \
            -backend-config="region=${{ secrets.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_STATE_LOCK_TABLE }}"
        working-directory: terraform/environments/feature

      - name: Terraform Apply
        id: tf-apply
        run: |
          terraform apply -var-file="feature.tfvars" -auto-approve
          echo "alb_dns_name=$(terraform output -raw alb_dns_name)" >> $GITHUB_OUTPUT
        working-directory: terraform/environments/feature

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ fromJson(steps.tf-apply.outputs.ecr_repository_url).repository_name }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image_url=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.build-image.outputs.image_url }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Setup Helm
        uses: azure/setup-helm@v3

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name $(echo '${{ fromJson(steps.tf-apply.outputs.cluster_name).value }}') --region ${{ secrets.AWS_REGION }}

      - name: Deploy with Helm
        run: |
          helm upgrade --install my-flask-app ./helm/my-flask-app \
            --set image.repository=${{ fromJson(steps.tf-apply.outputs.ecr_repository_url).repository_url }} \
            --set image.tag=${{ github.sha }} \
            --set ingress.hosts[0].host=${{ fromJson(steps.tf-apply.outputs.alb_dns_name).value }} \
            --set env.AWS_REGION=${{ secrets.AWS_REGION }} \
            --set env.DYNAMODB_TABLE=${{ fromJson(steps.tf-apply.outputs.dynamodb_table_name).value }} \
            --set-file secret.yaml=<(echo -n "secret-key: $(openssl rand -hex 32)")
            --namespace default \
            --create-namespace
